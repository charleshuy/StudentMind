@page "/surveys/edit"
@using Microsoft.EntityFrameworkCore
@using StudentMind.Core.Entity
@using StudentMind.Core.Interfaces
@inject IUnitOfWork UnitOfWork
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Survey</h2>
<hr />
@if (Survey is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Survey" OnValidSubmit="UpdateSurvey" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Survey.Id" value="@Survey.Id" />
                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <InputText id="name" @bind-Value="Survey.Name" class="form-control" />
                    <ValidationMessage For="() => Survey.Name" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="description" class="form-label">Description:</label>
                    <InputText id="description" @bind-Value="Survey.Description" class="form-control" />
                    <ValidationMessage For="() => Survey.Description" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="startdate" class="form-label">StartDate:</label>
                    <InputDate id="startdate" @bind-Value="Survey.StartDate" class="form-control" />
                    <ValidationMessage For="() => Survey.StartDate" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="enddate" class="form-label">EndDate:</label>
                    <InputDate id="enddate" @bind-Value="Survey.EndDate" class="form-control" />
                    <ValidationMessage For="() => Survey.EndDate" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="totalparticipants" class="form-label">TotalParticipants:</label>
                    <InputNumber id="totalparticipants" @bind-Value="Survey.TotalParticipants" class="form-control" />
                    <ValidationMessage For="() => Survey.TotalParticipants" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="typeid" class="form-label">TypeId:</label>
                    <InputText id="typeid" @bind-Value="Survey.TypeId" class="form-control" />
                    <ValidationMessage For="() => Survey.TypeId" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/surveys">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private string Id { get; set; }

    [SupplyParameterFromForm]
    private Survey? Survey { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var surveyRepository = UnitOfWork.GetRepository<Survey>();
        Survey = await surveyRepository.Entities.Include(s => s.Type).FirstOrDefaultAsync(s => s.Id == Id);

        if (Survey is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateSurvey()
    {
        await UnitOfWork.GetRepository<Survey>().UpdateAsync(Survey);
        
        try
        {
            await UnitOfWork.SaveAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!(await SurveyExistsAsync(Survey!.Id)))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/surveys");
    }

    private async Task<bool> SurveyExistsAsync(string id)
    {
        var surveyRepository = UnitOfWork.GetRepository<Survey>();
        var survey = await surveyRepository.Entities
            .Include(s => s.Type)
            .FirstOrDefaultAsync(s => s.Id == id);

        return survey != null; // Return true if found, false if not
    }
}
