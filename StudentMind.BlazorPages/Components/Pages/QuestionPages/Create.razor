@page "/questions/create"
@using Microsoft.EntityFrameworkCore
@using StudentMind.Core.Entity
@using StudentMind.Core.Interfaces
@inject IUnitOfWork UnitOfWork
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Question</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm Model="FormModel" OnValidSubmit="AddQuestion" FormName="create">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="mb-3">
                <label for="content" class="form-label">Content:</label>
                <InputText id="content" name="Content" @bind-Value="FormModel.Content" class="form-control" />
                <ValidationMessage For="() => FormModel.Content" class="text-danger" />
            </div>
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/questions">Back to List</a>
</div>

@code {
    // Simple form model (could be more fields as needed)
    private FormInputModel FormModel { get; set; } = new FormInputModel();
    private Question Question { get; set; } = new Question();

    private async Task AddQuestion()
    {
        // Manually assign form data to entity
        Question.Content = FormModel.Content;

        var questionRepository = UnitOfWork.GetRepository<Question>();
        await questionRepository.InsertAsync(Question);
        await UnitOfWork.SaveAsync();
        NavigationManager.NavigateTo("/questions");
    }

    // Simple DTO-like model
    public class FormInputModel
    {
        public string Content { get; set; } = string.Empty;
    }
}
