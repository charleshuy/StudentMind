@page "/events/details"
@using Microsoft.EntityFrameworkCore
@using StudentMind.Core.Entity
@using StudentMind.Core.Interfaces
@inject IUnitOfWork UnitOfWork
@inject NavigationManager NavigationManager

<link rel="stylesheet" href="css/event.css" />

<PageTitle>Event Details</PageTitle>

<div class="center-container">
    <h1>Event Details</h1>
    <h2>Event Information</h2>
    <hr />
    @if (currentEvent is null)
    {
        <div class="loading"><em>Loading...</em></div>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-2">Event Name</dt>
            <dd class="col-sm-10">@currentEvent.Name</dd>
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@currentEvent.Description</dd>
            <dt class="col-sm-2">Start Date</dt>
            <dd class="col-sm-10">@currentEvent.StartDate.ToString("d MMMM yyyy")</dd>
            <dt class="col-sm-2">End Date</dt>
            <dd class="col-sm-10">@currentEvent.EndDate.ToString("d MMMM yyyy")</dd>
            <dt class="col-sm-2">Host ID</dt>
            <dd class="col-sm-10">@currentEvent.HostId</dd>
            <dt class="col-sm-2">Created By</dt>
            <dd class="col-sm-10">@currentEvent.CreatedBy</dd>
            <dt class="col-sm-2">Last Updated By</dt>
            <dd class="col-sm-10">@currentEvent.LastUpdatedBy</dd>
            <dt class="col-sm-2">Deleted By</dt>
            <dd class="col-sm-10">@currentEvent.DeletedBy</dd>
            <dt class="col-sm-2">Created Time</dt>
            <dd class="col-sm-10">@currentEvent.CreatedTime.ToString("d MMMM yyyy HH:mm")</dd>
            <dt class="col-sm-2">Last Updated Time</dt>
            <dd class="col-sm-10">@currentEvent.LastUpdatedTime.ToString("d MMMM yyyy HH:mm")</dd>
            <dt class="col-sm-2">Deleted Time</dt>
            <dd class="col-sm-10">@currentEvent.DeletedTime?.ToString("d MMMM yyyy HH:mm")</dd>
        </dl>
        <div class="center-container" style="text-align: center; margin-top: 2rem;">
            <a href="@($"/events/edit?id={currentEvent.Id}")">Edit</a> |
            <a href="/events">Back to List</a>
        </div>
    }
</div>

@code {
    private Event? currentEvent;

    [Parameter, SupplyParameterFromQuery]
    public string? Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(Id))
        {
            NavigationManager.NavigateTo("notfound");
            return;
        }

        currentEvent = await UnitOfWork.GetRepository<Event>().GetByIdAsync(Id);

        if (currentEvent is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}