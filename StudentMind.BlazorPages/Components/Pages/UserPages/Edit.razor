@page "/users/edit"
@using StudentMind.Core.Entity
@using StudentMind.Core.Interfaces
@inject IUnitOfWork UnitOfWork
@inject NavigationManager NavigationManager

<PageTitle>Edit User</PageTitle>

<h1>Edit User</h1>
<hr />
@if (User == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm Model="User" OnValidSubmit="UpdateUser" FormName="EditUserForm">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert" />

                <div class="mb-3">
                    <label for="fullname" class="form-label">Full Name:</label>
                    <InputText id="fullname" @bind-Value="User.FullName" class="form-control" />
                    <ValidationMessage For="() => User.FullName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="phonenumber" class="form-label">Phone Number:</label>
                    <InputText id="phonenumber" @bind-Value="User.PhoneNumber" class="form-control" />
                    <ValidationMessage For="() => User.PhoneNumber" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="email" class="form-label">Email:</label>
                    <InputText id="email" @bind-Value="User.Email" class="form-control" />
                    <ValidationMessage For="() => User.Email" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="dateofbirth" class="form-label">Date of Birth:</label>
                    <InputDate id="dateofbirth" @bind-Value="User.DateOfBirth" class="form-control" />
                    <ValidationMessage For="() => User.DateOfBirth" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="gender" class="form-label">Gender:</label>
                    <InputSelect id="gender" @bind-Value="User.Gender" class="form-control">
                        <option value="Male">Male</option>
                        <option value="Female">Female</option>
                        <option value="Others">Others</option>
                    </InputSelect>
                    <ValidationMessage For="() => User.Gender" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="status" class="form-label">Status:</label>
                    <InputSelect id="status" @bind-Value="User.Status" class="form-control">
                        <option value="true">Active</option>
                        <option value="false">Inactive</option>
                    </InputSelect>
                    <ValidationMessage For="() => User.Status" class="text-danger" />
                </div>

                <button type="submit" class="btn btn-primary">Save Changes</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/users">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private string Id { get; set; }

    private User? User { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var userRepo = UnitOfWork.GetRepository<User>();
        User = await userRepo.GetByIdAsync(Id);

        if (User == null)
        {
            NavigationManager.NavigateTo("/notfound");
        }
    }

    private async Task UpdateUser()
    {
        var userRepo = UnitOfWork.GetRepository<User>();
        await userRepo.UpdateAsync(User);
        await UnitOfWork.SaveAsync();
        NavigationManager.NavigateTo("/users");
    }
}