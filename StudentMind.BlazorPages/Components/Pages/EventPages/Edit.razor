@page "/events/edit"
@using Microsoft.EntityFrameworkCore
@using StudentMind.Core.Entity
@inject IDbContextFactory<StudentMind.Infrastructure.Context.DatabaseContext> DbFactory
@inject NavigationManager NavigationManager

<link rel="stylesheet" href="css/event.css" />

<PageTitle>Edit Event</PageTitle>

<div class="center-container">
    <h1>Edit Event</h1>
    <h2>Event Details</h2>
    <hr />
    @if (Event is null)
    {
        <div class="loading"><em>Loading...</em></div>
    }
    else
    {
        <div class="row">
            <div class="col-md-4">
                <EditForm method="post" Model="Event" OnValidSubmit="UpdateEvent" FormName="edit" Enhance>
                    <DataAnnotationsValidator />
                    <ValidationSummary role="alert" />
                    <input type="hidden" name="Event.Id" value="@Event.Id" />
                    <div class="mb-3">
                        <label for="name" class="form-label">Event Name:</label>
                        <InputText id="name" @bind-Value="Event.Name" class="form-control" />
                        <ValidationMessage For="() => Event.Name" class="text-danger" />
                    </div>
                    <div class="mb-3">
                        <label for="description" class="form-label">Description:</label>
                        <InputText id="description" @bind-Value="Event.Description" class="form-control" />
                        <ValidationMessage For="() => Event.Description" class="text-danger" />
                    </div>
                    <div class="mb-3">
                        <label for="startdate" class="form-label">Start Date:</label>
                        <InputDate id="startdate" @bind-Value="Event.StartDate" class="form-control" />
                        <ValidationMessage For="() => Event.StartDate" class="text-danger" />
                    </div>
                    <div class="mb-3">
                        <label for="enddate" class="form-label">End Date:</label>
                        <InputDate id="enddate" @bind-Value="Event.EndDate" class="form-control" />
                        <ValidationMessage For="() => Event.EndDate" class="text-danger" />
                    </div>
                    <div class="mb-3">
                        <label for="hostid" class="form-label">Host ID:</label>
                        <InputText id="hostid" @bind-Value="Event.HostId" class="form-control" />
                        <ValidationMessage For="() => Event.HostId" class="text-danger" />
                    </div>
                    <div class="mb-3">
                        <label for="createdby" class="form-label">Created By:</label>
                        <InputText id="createdby" @bind-Value="Event.CreatedBy" class="form-control" />
                        <ValidationMessage For="() => Event.CreatedBy" class="text-danger" />
                    </div>
                    <div class="mb-3">
                        <label for="lastupdatedby" class="form-label">Last Updated By:</label>
                        <InputText id="lastupdatedby" @bind-Value="Event.LastUpdatedBy" class="form-control" />
                        <ValidationMessage For="() => Event.LastUpdatedBy" class="text-danger" />
                    </div>
                    <div class="mb-3">
                        <label for="deletedby" class="form-label">Deleted By:</label>
                        <InputText id="deletedby" @bind-Value="Event.DeletedBy" class="form-control" />
                        <ValidationMessage For="() => Event.DeletedBy" class="text-danger" />
                    </div>
                    <div class="mb-3">
                        <label for="createdtime" class="form-label">Created Time:</label>
                        <InputDate id="createdtime" @bind-Value="Event.CreatedTime" class="form-control" />
                        <ValidationMessage For="() => Event.CreatedTime" class="text-danger" />
                    </div>
                    <div class="mb-3">
                        <label for="lastupdatedtime" class="form-label">Last Updated Time:</label>
                        <InputDate id="lastupdatedtime" @bind-Value="Event.LastUpdatedTime" class="form-control" />
                        <ValidationMessage For="() => Event.LastUpdatedTime" class="text-danger" />
                    </div>
                    <div class="mb-3">
                        <label for="deletedtime" class="form-label">Deleted Time:</label>
                        <InputDate id="deletedtime" @bind-Value="Event.DeletedTime" class="form-control" />
                        <ValidationMessage For="() => Event.DeletedTime" class="text-danger" />
                    </div>
                    <button type="submit" class="btn btn-primary">Save</button>
                </EditForm>
            </div>
        </div>
    }
    <div class="center-container" style="text-align: center; margin-top: 2rem;">
        <a href="/events">Back to List</a>
    </div>
</div>

@code {
    [SupplyParameterFromQuery]
    private string? Id { get; set; }

    [SupplyParameterFromForm]
    private Event? Event { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Event ??= await context.Events.FirstOrDefaultAsync(m => m.Id == Id);

        if (Event is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task UpdateEvent()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Event!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!EventExists(Event!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/events");
    }

    private bool EventExists(string id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Events.Any(e => e.Id == id);
    }
}