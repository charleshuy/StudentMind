@page "/surveyquestions/delete"
@using Microsoft.EntityFrameworkCore
@using StudentMind.Core.Entity
@inject IDbContextFactory<StudentMind.Infrastructure.Context.DatabaseContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>SurveyQuestion</h2>
    <hr />
    @if (surveyquestion is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Id</dt>
            <dd class="col-sm-10">@surveyquestion.Id</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CreatedBy</dt>
            <dd class="col-sm-10">@surveyquestion.CreatedBy</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">LastUpdatedBy</dt>
            <dd class="col-sm-10">@surveyquestion.LastUpdatedBy</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DeletedBy</dt>
            <dd class="col-sm-10">@surveyquestion.DeletedBy</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CreatedTime</dt>
            <dd class="col-sm-10">@surveyquestion.CreatedTime</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">LastUpdatedTime</dt>
            <dd class="col-sm-10">@surveyquestion.LastUpdatedTime</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DeletedTime</dt>
            <dd class="col-sm-10">@surveyquestion.DeletedTime</dd>
        </dl>
        <EditForm method="post" Model="surveyquestion" OnValidSubmit="DeleteSurveyQuestion" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(surveyquestion is null)">Delete</button> |
            <a href="/surveyquestions">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private SurveyQuestion? surveyquestion;

    [SupplyParameterFromQuery]
    private string SurveyId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        surveyquestion = await context.SurveyQuestions.FirstOrDefaultAsync(m => m.SurveyId == SurveyId);

        if (surveyquestion is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteSurveyQuestion()
    {
        using var context = DbFactory.CreateDbContext();
        context.SurveyQuestions.Remove(surveyquestion!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/surveyquestions");
    }
}
