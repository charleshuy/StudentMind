@page "/appointments/delete"
@using Microsoft.EntityFrameworkCore
@using StudentMind.Core.Entity
@inject IDbContextFactory<StudentMind.Infrastructure.Context.DatabaseContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete Appointment</PageTitle>

<link href="css/appointment.css" rel="stylesheet" />

<div class="center-container">
    <h1>Delete Appointment</h1>

    <p>Are you sure you want to delete this appointment?</p>
    <div>
        <h2>Appointment Information</h2>
        <hr />
        @if (appointment is null)
        {
            <div class="loading">Loading...</div>
        }
        else
        {
            <dl class="row">
                <dt class="col-sm-2">Psychologist ID</dt>
                <dd class="col-sm-10">@appointment.PsychologistId</dd>
                <dt class="col-sm-2">User ID</dt>
                <dd class="col-sm-10">@appointment.UserId</dd>
                <dt class="col-sm-2">Created By</dt>
                <dd class="col-sm-10">@appointment.CreatedBy</dd>
                <dt class="col-sm-2">Last Updated By</dt>
                <dd class="col-sm-10">@appointment.LastUpdatedBy</dd>
                <dt class="col-sm-2">Deleted By</dt>
                <dd class="col-sm-10">@appointment.DeletedBy</dd>
                <dt class="col-sm-2">Created Time</dt>
                <dd class="col-sm-10">@appointment.CreatedTime.ToString("d MMMM yyyy")</dd>
                <dt class="col-sm-2">Last Updated Time</dt>
                <dd class="col-sm-10">@appointment.LastUpdatedTime.ToString("d MMMM yyyy")</dd>
                <dt class="col-sm-2">Deleted Time</dt>
                <dd class="col-sm-10">@appointment.DeletedTime?.ToString("d MMMM yyyy")</dd>
            </dl>
            <EditForm method="post" Model="appointment" OnValidSubmit="DeleteAppointment" FormName="delete" Enhance>
                <button type="submit" class="btn btn-danger" disabled="@(appointment is null)">Delete</button>
                <a href="/appointments" class="back-link">Back to List</a>
            </EditForm>
        }
    </div>
</div>

@code {
    private Appointment? appointment;

    [SupplyParameterFromQuery]
    private string Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        appointment = await context.Appointments.FirstOrDefaultAsync(m => m.Id == Id);

        if (appointment is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteAppointment()
    {
        using var context = DbFactory.CreateDbContext();
        context.Appointments.Remove(appointment!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/appointments");
    }
}