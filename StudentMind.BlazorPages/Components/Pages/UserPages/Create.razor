@page "/users/create"
@using StudentMind.Core.Entity
@using StudentMind.Core.Interfaces
@inject IUnitOfWork UnitOfWork
@inject NavigationManager NavigationManager

<PageTitle>Create User</PageTitle>

<h1>Create User</h1>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm Model="User" OnValidSubmit="AddUser" FormName="CreateUserForm">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="mb-3">
                <label for="fullname" class="form-label">Full Name:</label>
                <InputText id="fullname" @bind-Value="User.FullName" class="form-control" />
                <ValidationMessage For="() => User.FullName" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="phonenumber" class="form-label">Phone Number:</label>
                <InputText id="phonenumber" @bind-Value="User.PhoneNumber" class="form-control" />
                <ValidationMessage For="() => User.PhoneNumber" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="email" class="form-label">Email:</label>
                <InputText id="email" @bind-Value="User.Email" class="form-control" />
                <ValidationMessage For="() => User.Email" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="dateofbirth" class="form-label">Date of Birth:</label>
                <InputDate id="dateofbirth" @bind-Value="User.DateOfBirth" class="form-control" />
                <ValidationMessage For="() => User.DateOfBirth" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="roleid" class="form-label">Role:</label>
                <InputSelect id="roleid" @bind-Value="User.RoleId" class="form-control">
                    <option value="" disabled>Select a role</option>
                    @foreach (var role in Roles)
                    {
                        <option value="@role.Id">@role.RoleName</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => User.RoleId" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="username" class="form-label">Username:</label>
                <InputText id="username" @bind-Value="User.Username" class="form-control" />
                <ValidationMessage For="() => User.Username" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="password" class="form-label">Password:</label>
                <InputText id="password" @bind-Value="User.Password" class="form-control" type="password" />
                <ValidationMessage For="() => User.Password" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="gender" class="form-label">Gender:</label>
                <InputSelect id="gender" @bind-Value="User.Gender" class="form-control">
                    <option value="Male">Male</option>
                    <option value="Female">Female</option>
                    <option value="Others">Others</option>
                </InputSelect>
                <ValidationMessage For="() => User.Gender" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="status" class="form-label">Status:</label>
                <InputSelect id="status" @bind-Value="User.Status" class="form-control">
                    <option value="true">Active</option>
                    <option value="false">Inactive</option>
                </InputSelect>
                <ValidationMessage For="() => User.Status" class="text-danger" />
            </div>

            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/users">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private User User { get; set; } = new();
    private List<Role> Roles { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var roleRepo = UnitOfWork.GetRepository<Role>();
        Roles = (await roleRepo.GetAllAsync()).ToList();
    }

    private async Task AddUser()
    {
        User.Id = Guid.NewGuid().ToString().ToUpper();
        var userRepo = UnitOfWork.GetRepository<User>();
        await userRepo.InsertAsync(User);
        await UnitOfWork.SaveAsync();
        NavigationManager.NavigateTo("/users");
    }
}
