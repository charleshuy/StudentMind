@page "/surveyquestions/details"
@using Microsoft.EntityFrameworkCore
@using StudentMind.Core.Entity
@using StudentMind.Core.Interfaces
@inject IUnitOfWork UnitOfWork
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>SurveyQuestion</h2>
    <hr />
    @if (surveyquestion is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Id</dt>
            <dd class="col-sm-10">@surveyquestion.Id</dd>
            <dt class="col-sm-2">CreatedBy</dt>
            <dd class="col-sm-10">@surveyquestion.CreatedBy</dd>
            <dt class="col-sm-2">LastUpdatedBy</dt>
            <dd class="col-sm-10">@surveyquestion.LastUpdatedBy</dd>
            <dt class="col-sm-2">DeletedBy</dt>
            <dd class="col-sm-10">@surveyquestion.DeletedBy</dd>
            <dt class="col-sm-2">CreatedTime</dt>
            <dd class="col-sm-10">@surveyquestion.CreatedTime</dd>
            <dt class="col-sm-2">LastUpdatedTime</dt>
            <dd class="col-sm-10">@surveyquestion.LastUpdatedTime</dd>
            <dt class="col-sm-2">DeletedTime</dt>
            <dd class="col-sm-10">@surveyquestion.DeletedTime</dd>
        </dl>
        <div>
            <a href="@($"/surveyquestions/edit?surveyid={surveyquestion.SurveyId}")">Edit</a> |
            <a href="@($"/surveyquestions")">Back to List</a>
        </div>
    }
</div>

@code {
    private SurveyQuestion? surveyquestion;

    [SupplyParameterFromQuery]
    private string SurveyId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var surveyQuestionRepository = UnitOfWork.GetRepository<SurveyQuestion>();
        surveyquestion = await surveyQuestionRepository.Entities.FirstOrDefaultAsync(s => s.Id == SurveyId);

        if (surveyquestion is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
