@page "/questions/create"
@using Microsoft.EntityFrameworkCore
@using StudentMind.Core.Entity
@using StudentMind.Core.Interfaces
@inject IUnitOfWork UnitOfWork
@inject NavigationManager NavigationManager

<PageTitle>Create Question</PageTitle>

<h1>Create Question</h1>

<div class="row">
    <div class="col-md-4">
        <EditForm Model="questionModel" OnValidSubmit="AddQuestion" FormName="add-question-form">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />

            <div class="mb-3">
                <label for="content" class="form-label">Content:</label>
                <InputText id="content" @bind-Value="questionModel.Content" class="form-control" />
                <ValidationMessage For="() => questionModel.Content" class="text-danger" />
            </div>

            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>

        <p>Debug: Current Content Value = "@questionModel.Content"</p> <!-- Real-time debug -->
    </div>
</div>

<div>
    <a href="/questions">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private QuestionModel questionModel { get; set; } = new();

    private async Task AddQuestion()
    {
        Console.WriteLine($"Submitting Question: {questionModel.Content}");
        if (string.IsNullOrWhiteSpace(questionModel.Content))
        {
            Console.WriteLine("Error: Question content is empty!");
            return;
        }
		Question newQuestion = new Question
			{
				Id = Guid.NewGuid().ToString().ToUpper(),
				Content = questionModel.Content
			};
        var questionRepository = UnitOfWork.GetRepository<Question>();
        await questionRepository.InsertAsync(newQuestion);
        await UnitOfWork.SaveAsync();

        Console.WriteLine("Question saved successfully!");
        NavigationManager.NavigateTo("/questions", forceLoad: false);
    }

    public class QuestionModel
    {
        public string Content { get; set; } = string.Empty;
    }
}
