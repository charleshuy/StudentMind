@page "/surveys/create"
@using StudentMind.Core.Entity
@using StudentMind.Core.Interfaces
@inject NavigationManager NavigationManager
@inject IUnitOfWork UnitOfWork
@inject IJSRuntime JS

<PageTitle>Create Survey</PageTitle>

<h1>Create Survey</h1>

<div class="row">
    <div class="col-md-6">
        <EditForm method="post" Model="Survey" OnValidSubmit="AddSurvey" FormName="create-survey-form" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />

            <div class="mb-3">
                <label for="name" class="form-label">Name:</label>
                <InputText id="name" @bind-Value="Survey.Name" class="form-control" />
                <ValidationMessage For="() => Survey.Name" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="description" class="form-label">Description:</label>
                <InputText id="description" @bind-Value="Survey.Description" class="form-control" />
                <ValidationMessage For="() => Survey.Description" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="startdate" class="form-label">Start Date:</label>
                <InputDate id="startdate" @bind-Value="Survey.StartDate" class="form-control" />
                <ValidationMessage For="() => Survey.StartDate" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="enddate" class="form-label">End Date:</label>
                <InputDate id="enddate" @bind-Value="Survey.EndDate" class="form-control" />
                <ValidationMessage For="() => Survey.EndDate" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="totalparticipants" class="form-label">Total Participants:</label>
                <InputNumber id="totalparticipants" @bind-Value="Survey.TotalParticipants" class="form-control" />
                <ValidationMessage For="() => Survey.TotalParticipants" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="typeid" class="form-label">Survey Type:</label>
                <InputSelect id="type" @bind-Value="Survey.TypeId">
                    <option value="">Select a type</option>
                    @foreach (var type in SurveyTypes)
                    {
                        <option value="@type.Id">@type.Name</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => Survey.TypeId" class="text-danger" />
            </div>

            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/surveys">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Survey Survey { get; set; } = new();
    private List<SurveyType> SurveyTypes { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var surveyTypeRepo = UnitOfWork.GetRepository<SurveyType>();
        SurveyTypes = (await surveyTypeRepo.GetAllAsync()).ToList();
    }

    private async Task AddSurvey()
    {
        if (string.IsNullOrWhiteSpace(Survey.Description))
        {
            Survey.Description = "N/A";
        }

		Survey.Id = Guid.NewGuid().ToString().ToUpper();
        var surveyRepository = UnitOfWork.GetRepository<Survey>();
        await surveyRepository.InsertAsync(Survey);
        await UnitOfWork.SaveAsync();

        // Ensure UI updates before navigation
        NavigationManager.NavigateTo("/surveys", forceLoad: true);
    }
}
