@page "/events"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using StudentMind.Core.Entity
@using StudentMind.Core.Interfaces
@implements IAsyncDisposable
@inject IUnitOfWork UnitOfWork

<PageTitle>Events</PageTitle>

<h1>Event List</h1>

<p>
    <NavLink href="events/create">Create New</NavLink>
</p>

@if (events is not null)
{
    <QuickGrid Class="table" Items="events.AsQueryable()" PageSize="10" AllowPaging="true">
        <PropertyColumn Property="e => e.Name" Title="Name" />
        <PropertyColumn Property="e => e.Description" Title="Description" />
        <PropertyColumn Property="e => e.StartDate" Title="Start Date" />
        <PropertyColumn Property="e => e.EndDate" Title="End Date" />
        <PropertyColumn Property="e => e.HostId" Title="Host ID" />
        <PropertyColumn Property="e => e.CreatedBy" Title="Created By" />
        <PropertyColumn Property="e => e.LastUpdatedBy" Title="Updated By" />
        <PropertyColumn Property="e => e.CreatedTime" Title="Created Time" />
        <PropertyColumn Property="e => e.LastUpdatedTime" Title="Updated Time" />

        <TemplateColumn Context="e">
            <NavLink href="@($"events/edit?id={e.Id}")">Edit</NavLink> |
            <NavLink href="@($"events/details?id={e.Id}")">Details</NavLink> |
            <NavLink href="@($"events/delete?id={e.Id}")">Delete</NavLink>
        </TemplateColumn>
    </QuickGrid>
}
else
{
    <p>Loading...</p>
}

@code {
    private IQueryable<Event>? events = default;

    protected override void OnInitialized()
    {
        var eventRepository = UnitOfWork.GetRepository<Event>();
        events = eventRepository.Entities;
    }

    public async ValueTask DisposeAsync()
    {
        await UnitOfWork.DisposeAsync();
    }
}