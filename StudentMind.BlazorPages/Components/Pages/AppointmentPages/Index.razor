@page "/appointments"
@using Microsoft.AspNetCore.Components.QuickGrid
@using StudentMind.Core.Entity
@using StudentMind.Core.Interfaces
@implements IAsyncDisposable
@inject IUnitOfWork UnitOfWork

<PageTitle>Appointments</PageTitle>

<link href="css/appointment.css" rel="stylesheet" />

<div class="modern-container">
    <h1 class="modern-header">Appointments</h1>

    <p>
        <a href="appointments/create" class="create-button">CREATE NEW</a>
    </p>

    @if (appointments is not null)
    {
        <QuickGrid Class="modern-table" Items="appointments.AsQueryable()" PageSize="10" AllowPaging="true">
            <PropertyColumn Property="a => a.PsychologistId" Title="Psychologist ID" Sortable="true" />
            <PropertyColumn Property="a => a.UserId" Title="User ID" Sortable="true" />
            <PropertyColumn Property="a => a.CreatedBy" Title="Created By" Sortable="true" />
            <PropertyColumn Property="a => a.LastUpdatedBy" Title="Updated By" Sortable="true" />
            <PropertyColumn Property="a => a.DeletedBy" Title="Deleted By" Sortable="true" />
            <PropertyColumn Property="a => a.CreatedTime" Title="Created Time" Format="d MMMM yyyy" Sortable="true" />
            <PropertyColumn Property="a => a.LastUpdatedTime" Title="Updated Time" Format="d MMMM yyyy" Sortable="true" />
            <PropertyColumn Property="a => a.DeletedTime" Title="Deleted Time" Format="d MMMM yyyy" Sortable="true" />

            <TemplateColumn Title="Actions" Class="action-buttons">
                <a href="@($"appointments/edit?id={context.Id}")" class="edit">Edit</a>
                <a href="@($"appointments/details?id={context.Id}")" class="details">Details</a>
                <a href="@($"appointments/delete?id={context.Id}")" class="delete">Delete</a>
            </TemplateColumn>
        </QuickGrid>
    }
    else
    {
        <div class="loading">Loading appointments...</div>
    }
</div>

@code {
    private IQueryable<Appointment>? appointments = default;

    protected override void OnInitialized()
    {
        var appointmentRepository = UnitOfWork.GetRepository<Appointment>();
        appointments = appointmentRepository.Entities;
    }

    public async ValueTask DisposeAsync()
    {
        await UnitOfWork.DisposeAsync();
    }
}