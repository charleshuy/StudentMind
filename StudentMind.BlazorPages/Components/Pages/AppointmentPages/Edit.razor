@page "/appointments/edit"
@using StudentMind.Core.Entity
@using StudentMind.Core.Interfaces
@inject IUnitOfWork UnitOfWork
@inject NavigationManager NavigationManager

<PageTitle>Edit Appointment</PageTitle>

<h1>Edit Appointment</h1>
<hr />

@if (Appointment == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm Model="Appointment" OnValidSubmit="UpdateAppointment">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert" />

                <div class="mb-3">
                    <label for="psychologistid" class="form-label">Psychologist ID:</label>
                    <InputText id="psychologistid" @bind-Value="Appointment.PsychologistId" class="form-control" />
                    <ValidationMessage For="() => Appointment.PsychologistId" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="userid" class="form-label">User ID:</label>
                    <InputText id="userid" @bind-Value="Appointment.UserId" class="form-control" />
                    <ValidationMessage For="() => Appointment.UserId" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="starttime" class="form-label">Start Time:</label>
                    <InputDate id="starttime" @bind-Value="Appointment.StartTime" class="form-control" />
                    <ValidationMessage For="() => Appointment.StartTime" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="endtime" class="form-label">End Time:</label>
                    <InputDate id="endtime" @bind-Value="Appointment.EndTime" class="form-control" />
                    <ValidationMessage For="() => Appointment.EndTime" class="text-danger" />
                </div>

                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/appointments">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private string Id { get; set; }

    private Appointment? Appointment { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Appointment = await UnitOfWork.GetRepository<Appointment>().GetByIdAsync(Id);

        if (Appointment is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task UpdateAppointment()
    {
        if (Appointment == null) return;

        await UnitOfWork.GetRepository<Appointment>().UpdateAsync(Appointment);

        await UnitOfWork.SaveAsync();


        NavigationManager.NavigateTo("/appointments");
    }

    private async Task<bool> AppointmentExists(string id)
    {
        return await UnitOfWork.GetRepository<Appointment>().ExistsAsync(a => a.Id == id);
    }
}
