@page "/events/details"
@using Microsoft.EntityFrameworkCore
@using StudentMind.Core.Entity
@using StudentMind.Core.Interfaces
@inject IUnitOfWork UnitOfWork
@inject NavigationManager NavigationManager

<PageTitle>Event Details</PageTitle>

<h1>Event Details</h1>

<div>
    <h2>Event</h2>
    <hr />
    @if (currentEvent is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@currentEvent.Name</dd>
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@currentEvent.Description</dd>
            <dt class="col-sm-2">StartDate</dt>
            <dd class="col-sm-10">@currentEvent.StartDate</dd>
            <dt class="col-sm-2">EndDate</dt>
            <dd class="col-sm-10">@currentEvent.EndDate</dd>
            <dt class="col-sm-2">HostId</dt>
            <dd class="col-sm-10">@currentEvent.HostId</dd>
            <dt class="col-sm-2">CreatedBy</dt>
            <dd class="col-sm-10">@currentEvent.CreatedBy</dd>
            <dt class="col-sm-2">LastUpdatedBy</dt>
            <dd class="col-sm-10">@currentEvent.LastUpdatedBy</dd>
            <dt class="col-sm-2">DeletedBy</dt>
            <dd class="col-sm-10">@currentEvent.DeletedBy</dd>
            <dt class="col-sm-2">CreatedTime</dt>
            <dd class="col-sm-10">@currentEvent.CreatedTime</dd>
            <dt class="col-sm-2">LastUpdatedTime</dt>
            <dd class="col-sm-10">@currentEvent.LastUpdatedTime</dd>
            <dt class="col-sm-2">DeletedTime</dt>
            <dd class="col-sm-10">@currentEvent.DeletedTime</dd>
        </dl>
        <div>
            <a href="@($"/events/edit?id={currentEvent.Id}")">Edit</a> |
            <a href="@($"/events")">Back to List</a>
        </div>
    }
</div>

@code {
    private Event? currentEvent;

    [Parameter, SupplyParameterFromQuery]
    public string? Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(Id))
        {
            NavigationManager.NavigateTo("notfound");
            return;
        }

        currentEvent = await UnitOfWork.GetRepository<Event>().GetByIdAsync(Id);

        if (currentEvent is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
